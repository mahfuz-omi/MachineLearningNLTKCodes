# series(index+list)
import pandas as pd
series = pd.Series([1,3,5,7],index=[1,2,3,4])

# pd.series(list1=mandatory=y value,list2=x value=optional,default = [0,1,2....]
1 1
2 3
3 5
4 7

series.values = pure python list = [1,3,5,7] = y values
series.index = pure python list = [1,2,3,4] = x values

# data frame = multiple series wuth single index

df = pd.read_csv("sales_data_types.csv")
    Customer Number	Customer Name	2016	2017	Percent Growth	Jan Units	Month	Day	Year	Active
0	10002.0	Quest Industries	$125,000.00	$162500.00	30.00%	500	1	10	2015	Y
1	552278.0	Smith Plumbing	$920,000.00	$101,2000.00	10.00%	700	6	15	2014	Y
2	23477.0	ACME Industrial	$50,000.00	$62500.00	25.00%	125	3	29	2016	Y
3	24900.0	Brekke LTD	$350,000.00	$490000.00	4.00%	75	10	27	2015	Y
4	651029.0	Harbor Co	$15,000.00	$12750.00	-15.00%	Closed	2	2	2014	N

here index added by default. This auto index can be overrided by selectiong other columns as index column.

df['Month'] will return a series(index+list)

0 $125,000.00
1 $920,000.00
2 $50,000.00
3 $350,000.00
4 $15,000.00

df['Month'].values will return the list
[$125,000.00,$920,000.00,....]

df['2016'] + df['2017']
0      $125,000.00$162500.00
1    $920,000.00$101,2000.00
2        $50,000.00$62500.00
3      $350,000.00$490000.00
4        $15,000.00$12750.00
dtype: object

This does not look right.
We would like to get totals added together but pandas is just concatenating the two values together to create one long string.
A clue to the problem is the line that says dtype: object.
An object is a string in pandas so it performs a string operation instead of a mathematical one.

The simplest way to convert a pandas column of data to a different type is to use astype() . For instance, to convert the Customer Number to an integer we can call it like this:

df['Customer Number'].astype('int')
0     10002
1    552278
2     23477
3     24900
4    651029
Name: Customer Number, dtype: int64